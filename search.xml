<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初始网络编程</title>
      <link href="2021/09/17/%E5%88%9D%E5%A7%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>2021/09/17/%E5%88%9D%E5%A7%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><ul><li>在网络通信协议下，实现网络互连的不同计算机上运行的程序之间可进行数据交换</li></ul><p>三要素：</p><ul><li><p><strong>IP地址</strong>：要想让网络中的计算机能后相互通信，必须为每台计算机指定一个标号，通过这个标号来指定接受数据的计算机和识别发送的计算机，而IP地址就是这个标号，也是设备的标识</p><ul><li><p>IPv4:是给每个连接在网络上的主机分配一个32bit的地址，按照TCP/IP规定，IP地址使用二进制表示，每个IP地址长32bit，也即是4个字节，例如一个采用二进制形式的IP地址为：11000000 10101000 00000001 01000010 ，这么长的地址处理起来太费劲了，为了方便使用，IP地址经常被写成十进制的形式，中间使用符号“.”分割不用的字节，于是，上面的IP地址可以表示为：192.168.1.66。IP地址的这种表示方法叫做”点分十进制表示法“，这显然比1和0容易记忆</p></li><li><p>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP地址的分配很紧张，为了扩大地址空间，通过IPv6重新定义地址空间，采用128为地址长度，每16个字节一组，分成8组十六进制数，这样就解决了网络地址资源数量布不够的问题</p></li><li><p>常用命令：</p><ul><li>ipconfig：查看本机地址</li><li>ping IP地址：查看网络是否连通</li></ul></li><li><p>特殊IP地址：127.0.0.1是回送地址，一般代表本机地址，一般用来测试使用</p></li><li><p>InetAddress：此类表示IP地址</p><ul><li><ul><li><table><thead><tr><th><code>static InetAddress</code></th><th><code>getByName(String host)</code>  确定主机名称的IP地址。</th></tr></thead><tbody><tr><td></td><td>括号里可以是主机名也可以是IP地址</td></tr></tbody></table></li></ul></li><li><ul><li><table><thead><tr><th><code>String</code></th><th><code>getHostAddress()</code>  返回文本显示中的IP地址字符串。</th></tr></thead><tbody><tr><td><code>String</code></td><td><code>getHostName()</code>  获取此IP地址的主机名。</td></tr></tbody></table></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InetAddressDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InetAddress</span> byName <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//确定IP地址</span>        <span class="token class-name">String</span> hostName <span class="token operator">=</span> byName<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取主机名</span>        <span class="token class-name">String</span> hostAddress <span class="token operator">=</span> byName<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取IP地址</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主机名："</span><span class="token operator">+</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IP地址："</span><span class="token operator">+</span>hostAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>端口</strong>：网络的通信，本质上是应用程序的通信，而每台计算机有不同的应用程序，而如何区分这些应用程序呢，如果说IP地址可以唯一标识网络中的设备，那么端口可以唯一标识应用程序。</p><p><strong>端口号</strong>：用两个字节表示的整数，它的取值范围是0-65535，其中，0-1023之间的端口号表示一些知名的网络服务，普通的应用程序需要使用1024以上的端口号，如果一个端口号被另外一个服务所占用，会导致当前的程序启动失败。</p></li><li><p><strong>协议</strong>：通过计算机网络使多台计算机进行连接，位于同一网络的计算机在进行通信时要遵守一定的规则，则会这些连接和通信的规则被称为网络通信协议，常见的协议有UDP和TCP</p><ul><li><p>UDP：<strong>无连接通信协议</strong>，即在传输数据时，数据的发送端和接受端不建立逻辑连接，简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接受端在收到数据时也不会向发送端反馈是否接受成功。由于UDP协议消耗资源小，通信效率高，所以通常用于<strong>音频、视频、和普通数据的传输</strong>。</p></li><li><p>TCP：传输控制协议，TCP是<strong>面向连接</strong>的协议，即传输数据之前，在发送端和接收端建立逻辑链接，然后再传输数据，它提供了两台计算机之间可靠吴差错的数据传输，在TCP连接中必须明确客户端和服务器，又客户端向服务器发出连接请求，每次连接的创建都需要经过<strong>三次握手</strong>。</p><p><strong>三次握手</strong>：</p><p>第一次握手：客户吨向服务器端发出连接请求，等待服务器端确认</p><p>第二次握手：服务器端向客户端回送一个响应，通知客户端收到了连接请求。</p><p>第三次握手：客户端再次向服务器端发送确认信息，确认连接</p><p>完成三次握手，连接建立后，客户端和服务器端就可以开始实进行数据传输，由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如：<strong>上传文件，下载文件，浏览网页</strong></p></li></ul></li></ul><h2 id="UDP发送数据"><a href="#UDP发送数据" class="headerlink" title="UDP发送数据"></a>UDP发送数据</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UdpSendDEmo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    UDP发送数据：    1. 创建发送端的socket对象，（DatagramSocket）    2. 创建数据，并把数据打包：    DatagramPacket(byte[] buf, int length, InetAddress address, int port)    构造用于发送长度的分组的数据报包 length指定主机上到指定的端口号。    3. 调用方法发送数据    4. 关闭发送端     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//创建发送端对象</span>        <span class="token class-name">DatagramSocket</span> ds<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建数据，并打包</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> by<span class="token operator">=</span><span class="token string">"你好啊！"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>by<span class="token punctuation">,</span>by<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.137.2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送数据</span>        ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭发送端</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="UDP接收数据"><a href="#UDP接收数据" class="headerlink" title="UDP接收数据"></a>UDP接收数据</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UdpReciveDemo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    UDP接受数据：    1.创建接收端对象（DatagramSocket）    2.创建一个数据包，用于接受数据    3.调用方法，接受数据    4，解析数据包，并显示在控制台上    5.关闭接收端     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建接收端对象:要写明端口</span>        <span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个数据包用于接收数据:DatagramPacket(byte[] buf, int length)</span>        <span class="token comment">//构造一个 DatagramPacket用于接收长度的数据包 length 。</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> by<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>by<span class="token punctuation">,</span>by<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用方法接收数据</span>        ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解析数据包byte[] getData()</span>        <span class="token comment">//返回数据缓冲区。</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打印在控制台</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收的数据为:"</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭发送端</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TCP发送数据"><a href="#TCP发送数据" class="headerlink" title="TCP发送数据"></a>TCP发送数据</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPSendDemo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    TCP发送数据：    1.获取客户端的Socket对象，指明主机和端口‘    2.获取输入流    3.释放资源     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Socket</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.137.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10087</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好呀"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TCP接收数据"><a href="#TCP接收数据" class="headerlink" title="TCP接收数据"></a>TCP接收数据</h2><pre class="line-numbers language-java'" data-language="java'"><code class="language-java'">public class TCPReviceDemo &#123;    &#x2F;*    TCP接收数据    1.创建服务器端的对象（SeverSocket），指明端口    2.获取输入流，读数据，并打印    3.释放资源     *&#x2F;    public static void main(String[] args) throws IOException &#123;        ServerSocket ss&#x3D;new ServerSocket(10087);        Socket accept &#x3D; ss.accept();&#x2F;&#x2F;接听客户端的连接        InputStream inputStream &#x3D; accept.getInputStream();&#x2F;&#x2F;获取输入流        byte[] by&#x3D;new byte[1024];        int len &#x3D; inputStream.read(by);        String data&#x3D;new String(by,0,len);        System.out.println(&quot;数据是：&quot;+data);        ss.close();        inputStream.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多线程传输"><a href="#多线程传输" class="headerlink" title="多线程传输"></a>多线程传输</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//客户端类</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientDemo3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建客户端对象</span>        <span class="token class-name">Socket</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"192.168.137.1"</span><span class="token punctuation">,</span><span class="token number">10088</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从文件中读取数据，发送</span>        <span class="token class-name">BufferedReader</span> br<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"Demo2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedWriter</span> bw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       s<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//停止传输</span>        <span class="token comment">//接收反馈</span>        <span class="token class-name">BufferedReader</span> br2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line2<span class="token operator">=</span>br2<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端："</span><span class="token operator">+</span>line2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//释放资源</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//服务器端类 </span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServreDemo3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建服务器端对象</span>        <span class="token class-name">ServerSocket</span> ss<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">10088</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//建立与客户端的连接</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Socket</span> a <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServreThread</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//线程类</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServreThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span>  <span class="token class-name">Socket</span> s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ServreThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedReader</span> br<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> f<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"Demo["</span><span class="token operator">+</span>count<span class="token operator">+</span><span class="token string">"].txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                f<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"Demo["</span><span class="token operator">+</span>count<span class="token operator">+</span><span class="token string">"].txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">BufferedWriter</span> bw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">BufferedWriter</span> bw2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"文件上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw2<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw2<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程模式</title>
      <link href="2021/09/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/09/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>进程：正在运行中的程序</p><p>线程：单线程：进程中只有一条执行路径</p><p>​         多线程：进程中有多条执行路径</p><h2 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h2><h3 id="实现Thread类"><a href="#实现Thread类" class="headerlink" title="实现Thread类"></a>实现Thread类</h3><ol><li><p>先创建Thread的子类，并且重写run方法</p></li><li><p>在主程序中创线程类对象，并执行Start方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MythreadDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Mythread</span> my1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mythread</span> my2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        my1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        my2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*通过实现RUnnable接口实现多线程1. 创建myRunnable类实现RUnnable接口，重写run方法2.在测试类中创建myRUnnable对象3.创建Thread类，MyRunnable作为参数4.启动线程 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">99</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyRunnable</span> my<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> th1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"关羽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> th2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"张飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置获取线程名称"><a href="#设置获取线程名称" class="headerlink" title="设置获取线程名称"></a>设置获取线程名称</h2><ul><li><ul><li><table><thead><tr><th><code>String</code></th><th><code>getName()</code>  返回此线程的名称。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></li></ul></li></ul><p>设置线程名称</p><ol><li><ul><li><table><thead><tr><th><code>void</code></th><th><code>setName(String name)</code>  将此线程的名称更改为等于参数 <code>name</code> 。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">my1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"火车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>构造方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token class-name">Mythread</span> my1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token string">"火车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Mythread</span> my2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ul><li><table><thead><tr><th><code>static Thread</code></th><th><code>currentThread()</code>  返回对当前正在执行的线程对象的引用。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></li></ul></li></ol><h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><ol><li><p>分时调度模型：每个线程轮流使用CPU，平均分配每个线程CPU的时间片</p></li><li><p>抢占式调度模型：优先级高的线程优先使用CPU，如果优先级相同，则随机分配，优先级高的时间片长一些</p><p><strong>java使用的是抢占式调度模型</strong></p></li></ol><p>设置获取线程优先级</p><ul><li><ul><li><table><thead><tr><th><code>int</code></th><th><code>getPriority()</code>  返回此线程的优先级。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></li></ul></li><li><ul><li><table><thead><tr><th><code>void</code></th><th><code>setPriority(int newPriority)</code>  更改此线程的优先级。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></li></ul></li></ul><p>线程的优先级默认为5，范围是1-10</p><p>线程优先级高仅仅表示获取CPU时间片的几率高，并不能总是率先执行</p><h2 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h2><ul><li><ul><li><table><thead><tr><th><code>static void</code></th><th><code>sleep(long millis)</code>  使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行），具体取决于系统定时器和调度程序的精度和准确性。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//让线程每次执行一次停顿一秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><ul><li><table><thead><tr><th><code>void</code></th><th><code>join()</code>  等待这个线程死亡。</th></tr></thead><tbody><tr><td></td><td>该线程执行完以后其他线程才开始执行</td></tr></tbody></table></li></ul></li><li><ul><li><table><thead><tr><th><code>void</code></th><th><code>setDaemon(boolean on)</code>  将此线程标记为 <a href="../../java/lang/Thread.html#isDaemon--">daemon</a>线程或用户线程。</th></tr></thead><tbody><tr><td></td><td>先执行主线程，当线程都为守护线程时，JVM虚拟机退出</td></tr></tbody></table></li></ul></li></ul><h2 id="数据安全问题"><a href="#数据安全问题" class="headerlink" title="数据安全问题"></a>数据安全问题</h2><p>产生原因：</p><ol><li>多线程</li><li>共享数据</li><li>都会操作数据，使数据发生变化</li></ol><p>解决方法:</p><ol><li>使用同步代码块给代码上锁，使得其中一个线程执行该代码时其他线程不能执行该代码。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"卖出第"</span><span class="token operator">+</span>num<span class="token operator">+</span><span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>同步方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SellTicket</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                           <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">&#125;</span>                       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出第"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       num<span class="token operator">--</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span><span class="token punctuation">&#123;</span>           <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出第"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               num<span class="token operator">--</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>同步静态方法的锁对象是：类名.class</strong></p></li><li><p>lock锁的使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Lock</span> lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加锁</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"卖出第"</span><span class="token operator">+</span>num<span class="token operator">+</span><span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放锁</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="消费者模式"><a href="#消费者模式" class="headerlink" title="消费者模式"></a>消费者模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//奶箱类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> milk<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> state<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> milk<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果奶箱中没有牛奶，就等待</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>milk<span class="token operator">=</span>milk<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"牛奶工放入第"</span><span class="token operator">+</span>milk<span class="token operator">+</span><span class="token string">"瓶牛奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        state<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者取出第"</span><span class="token operator">+</span>milk<span class="token operator">+</span><span class="token string">"瓶牛奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        state<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//生产者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Box</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">Box</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span>b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             b<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//消费者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Box</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">Box</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span>b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            b<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boxdemo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*   生产者模式牛奶例子：   1. 创建牛奶盒子，用来存放牛奶，两个方法分别代表放牛奶和取牛奶   2.创建生产者类   3。创建消费者类   4.测试主类：创建牛奶盒子对象，创建生产者对象，消费者对象，执行线程     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Box</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Producer</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> th1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> th2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的简单使用</title>
      <link href="2021/06/06/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/06/06/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><p><strong>什么是Git？</strong></p><p>Git目前是世界上最先进的分布式版本控制系统。</p><p><strong>那什么是版本控制系统？</strong></p><p>如果你用word写过长篇大论，那你一定有过的这样的经历：</p><p>想删除一个段落，又怕将来想恢复找不回来怎么办，有办法，先把文件另存为“…..”一个新的word文件，再接着改，改到一定程度，再另存为“…..”一个新文件，这样一直改下去，看着一堆乱七八糟的文件，想要保留最新的文件，却又不敢把其他的文件删掉，就怕哪天会用到，唉，真郁闷。更要命的是，有些部分需要你的同事帮助填写，于是你把文件copy给她，然后，你继续修改word文件，一天后，同事再把文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，把你的改动和她的部分合并起来，真困难。</p><p>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p><p><img src="https://z3.ax1x.com/2021/06/07/2BKgh9.png"></p><p>这样，你就结束了手动管理多个“版本”的史前时代，进入到了版本控制的21世纪。</p><blockquote><p>关于git的诞生以及集中式VS分布式可以阅读：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000">Git简介</a></p></blockquote><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><ol><li><p>在windows上安装Git，可以直接在git官网[下载安装程序](<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a>),然后默认按选项安装即可。</p><p>安装完成后，点击鼠标右键若出现“<code>Git Bash Here</code>“，则安装成功了。</p></li><li><p>点击”<code>Git Bash Here</code>“在命令行输入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"Your name"</span>      <span class="token comment">//引号里输入你的用户名</span>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"Your email"</span>       <span class="token comment">//输入你的邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为Git是分布式版本控制系统，所以每个机器必须自报家门：你的名字和email地址。</p></li></ol><h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><ol><li><p>什么是版本库呢？版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p></li><li><p>创建：</p><ul><li><p>第一种方法：直接右键创建文件夹</p></li><li><p>第二种：使用命令</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">mkdir 文件夹名称cd 文件夹名称      <span class="token comment">//此步是进入文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>通过 <code>git  init</code> 命令把这个目录变成Git可以管理的仓库</p></li><li><p>把文件添加到版本库</p><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p><p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p><p>第一步：用命令<code>git  add</code> 告诉Git，把文件添加到仓库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git add hello<span class="token punctuation">.</span>txt    <span class="token comment">//文件的名称，要写全</span>    <span class="token comment">//或者</span>git add <span class="token punctuation">.</span>            <span class="token comment">//这是添加目录内的所有文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行上面的命令，没有任何显示，这就对了，说明添加成功</p><p>第二步：把文件提交到仓库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git commit <span class="token operator">-</span>m <span class="token string">"这是第一版"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="各种功能"><a href="#各种功能" class="headerlink" title="各种功能"></a>各种功能</h1><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>在原来的文件做修改后，使用 <code>git status</code> 查看仓库当前状态，会告诉我们有文件做了修改，如果想要查看具体修改的内容，输入<code>git diff</code>  文件名</p><p>做出修改后，再把它提交到仓库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git add 文件名    <span class="token comment">//或者</span>git add <span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">git commit <span class="token operator">-</span>m <span class="token string">"这是第二版"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>版本控制系统有个命令可以告诉我们历史记录：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的内容中：<code>commit</code> 后面跟着的内容是版本号</p><p>在git中，后面跟着HEAD的是当前版本，若要返回以前的版本，使用以下命令</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git reset <span class="token operator">--</span>hard 版本号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你换成以前的版本后，使用<code>git log</code> 命令后发现，我的最新版不见了，这时再想要回到最新版，肿么办？</p><p>不要慌，因为我们的窗口还没有关掉，只要我们往上翻找，找到对应版本的版本号就好了！</p><p>如果退出了窗口，可以使用 <code>git reflog</code> 命令查看你的历史记录，就可以查看版本号。</p><h2 id="工作区和在暂存区："><a href="#工作区和在暂存区：" class="headerlink" title="工作区和在暂存区："></a>工作区和在暂存区：</h2><p><strong>工作区：</strong>就是你在电脑上看到的目录</p><p><strong>版本库：</strong>工作区有个隐藏的目录.git,这个不算工作区，而是git的版本库，git的版本库中存了很多东西，其中最重要就是stage的暂存区，还有git为我们自动添加的分支：<code>master</code>,以及指向master的指针叫<code>HEAD</code>。</p><p>前面说我们把文件往git版本库里添加的时候，分为2步执行：</p><ol><li><code>git add</code> :把文件添加到暂存区</li><li><code>git commit -m &quot;....&quot;</code>:把暂存区的所有内容提交到当前分支（master)，这时暂存区就变空了。</li></ol><h2 id="撤销修改："><a href="#撤销修改：" class="headerlink" title="撤销修改："></a>撤销修改：</h2><ul><li><p>场景1：当修改了工作区的内容，想直接回到修改前时,使用命令：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git checkout <span class="token operator">--</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>场景2：当你修改了内容，并且放到了暂存区，想丢弃修改，需要两步</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git reset HEAD 文件名 <span class="token comment">//此步回到了场景1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">git checkout <span class="token operator">--</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>场景3:已经提交到了版本库:参考版本回退一节，不过前提是没有推送到远程仓库（远程仓库后面会说到）</p></li></ul><h2 id="删除文件："><a href="#删除文件：" class="headerlink" title="删除文件："></a>删除文件：</h2><p>删除文件的2中方法：</p><ol><li>直接鼠标右键删除</li><li>使用命令：<code>rm </code>文件名</li></ol><p>如果你已经将文件添加到版本库，现在你有两个选择：</p><ol><li><p>你是真的想删：那么就用<code>git commit -m &quot;...&quot;</code>  提交到版本库</p></li><li><p>你是不小心删掉的，想要恢复：</p><p>因为版本库中还有呢，所以使用命令：<code>git checkout -- 文件名 </code> 就可恢复，但你只能恢复到版本库中的内容。</p></li></ol><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ol><li><p>这个世界上有个叫Github的神奇网站，从名字可以看出，这个网站就是提供Git仓库管理服务的，所以，只要注册一个Github账号，就可以免费会获得远程仓库。</p></li><li><p>Github仓库和本地仓库之间的传输是通过SSH加密的，所以需要一点设置：</p><ul><li><p>第一步：创建SSH Key。打开Git Bash Here</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span><span class="token class-name">C</span> <span class="token string">"你的邮件"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后一路回车，如果成功的话，会在用户的主目录中找到<code>.ssh</code>目录（一般在C盘的用户目录中），里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件的，<code>id_rsa</code>是私钥，<strong>不能随便泄露</strong>，<code>id_rsa_pub</code>是公钥，可以放心告诉任何人。</p></li><li><p>第二步：登录Github，点击<code>settings</code>，打开<code>”SSH Key&quot;</code>页面，然后点“<code>Add SSH Key</code>“ ，填上任意title，再Key文本框粘贴上id_rsa.pub文件的内容，点”<code>Add key</code>“即可。</p></li></ul></li></ol><h2 id="在github上创建仓库："><a href="#在github上创建仓库：" class="headerlink" title="在github上创建仓库："></a>在github上创建仓库：</h2><ul><li><p>右上角”<code>create a new repository</code>“,创建一个新的仓库，仓库名要和你本地的仓库名字一样，比如你创建的文件夹的名字为“test”，你的Github仓库名字必须也是这个。创建成功后，会出现一个地址，复制下来。</p></li><li><p>在本地仓库（文件夹）内打开<code>Git Bash Here</code>，运行命令</p><pre class="line-numbers language-java'" data-language="java'"><code class="language-java'">git remote add origin 刚刚你复制的地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将本地仓库推送到远端：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git push <span class="token operator">-</span>u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>这是你会发现的Github的仓库和本地的仓库一模一样了。</p><p>从现在起，只要本地作提交，只需要以下命令：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="删除远程库："><a href="#删除远程库：" class="headerlink" title="删除远程库："></a>删除远程库：</h2><p>如果添加的时候地址写错了，或者就是想删除远程库，使用以下命令：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用前，建议先用<code>git remote -v</code>查看远程库信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git remote <span class="token operator">-</span>vorigin  git<span class="token annotation punctuation">@github.com</span><span class="token operator">:</span>michaelliao<span class="token operator">/</span>learn<span class="token operator">-</span>git<span class="token punctuation">.</span>git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origin  git<span class="token annotation punctuation">@github.com</span><span class="token operator">:</span>michaelliao<span class="token operator">/</span>learn<span class="token operator">-</span>git<span class="token punctuation">.</span>git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，根据名字删除，比如删除<code>origin</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。</p><p>现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p><ul><li><p>登录Github，创建仓库。</p></li><li><p>去本地</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git clone 仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>​    在<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上。</p><p>​     你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变。</p><p>​     假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并。</p><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">git checkout <span class="token operator">-</span>b dev     <span class="token comment">//创建并切换</span>     <span class="token comment">//或者</span>git <span class="token keyword">switch</span> <span class="token operator">-</span>c dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看分支</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git branch               <span class="token comment">//会列出所有分支，在当前分支前面加一个*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，我们就可以在dev分支上正常提交</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git add 文件名    git commit <span class="token operator">-</span>m <span class="token string">"......"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在，<code>dev</code>分支上的工作完成，我们就可以切换到master分支</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git checkout master    <span class="token comment">//或者</span>git <span class="token keyword">switch</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>切换到<code>master</code>分支后,我们打开文件发现刚才修改的内容不见了，这是因为那个提交是在dev分枝上，而master分支此刻的提交点没有变。</p><p>我们把<code>dev</code>分支合并到master分支上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git merge dev           <span class="token comment">//表示将目标分支合并到当前分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>合并完成后，就可以删除dev分支了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git branch <span class="token operator">-</span>d dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再查看分支：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会发现<code>dev</code>分支不见了</p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>当我们在<code>dev</code>分支修改内容后，切换到master分支，又在同样地方不小心修改了一些内容，两者发生了冲突，合并时就会报错。</p><p>这时就需要我们手动改回来，再进行合并。</p><p>（可以用<code>git log --graph</code>产看分支合并图）。</p><blockquote><p>此文章是关于Git的一些简单使用，想要查看更多使用方法，参考里廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础</title>
      <link href="2021/06/02/HTML%E5%9F%BA%E7%A1%80/"/>
      <url>2021/06/02/HTML%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="标签的语法"><a href="#标签的语法" class="headerlink" title="标签的语法"></a>标签的语法</h1><ul><li><p>标签由英文&lt;&gt;括起来，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>标签一般成双出现，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>span<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>标签不区分大小写，但大部分程序员用小写。</p></li></ul><h1 id="HTMl文档结构"><a href="#HTMl文档结构" class="headerlink" title="HTMl文档结构"></a>HTMl文档结构</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>标签对：<span class="token operator">&lt;</span>html<span class="token operator">></span>位于文档的最前面，用来标识文档的开始；<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>用于文档的最后面，用来标识文档的结束。中间部分是文档的头部（head）和主体（body）。<span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>标签对：包含一些文档的信息，可以包含文档的辅助性标签，例如：<span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">:</span>标题     <span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">:</span>用来修改文件的样式     <span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>      <span class="token operator">&lt;</span>link<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span>meta<span class="token operator">/</span><span class="token operator">></span>       <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">:</span>设置当前文件字符编码 但是浏览器只会显示<span class="token operator">&lt;</span>title<span class="token operator">></span>的内容。<span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">:</span>中间放html的主要内容。注释文字：<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注释文字<span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="各种标签"><a href="#各种标签" class="headerlink" title="各种标签"></a>各种标签</h1><p><em><strong>语义化标签</strong></em></p><ul><li><p>段落标签：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p<span class="token operator">></span> 段落文本<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自定义样式标签:<span>文字</span></p><p>需要在head标签中使用style标签：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>了不起的盖茨比<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>style<span class="token operator">></span>    span <span class="token punctuation">&#123;</span>        color<span class="token operator">:</span>blue<span class="token punctuation">;</span><span class="token comment">//将字体设置为蓝色</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>标题标签：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span> <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">...</span><span class="token punctuation">.</span>共有<span class="token number">6</span>级，字号逐级递减<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为网页划分独立板块：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div<span class="token operator">></span>内容<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> 相当于一个容器，将内容放在里面，将各个部分划分开。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>头部标签：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>header<span class="token operator">></span>我是头部标签<span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>底部标签：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>footer<span class="token operator">></span> 我是底部标签<span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>正文标签：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>section<span class="token punctuation">></span></span>我是一个区域<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>侧边栏标签：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>aside<span class="token operator">></span>我是侧边栏<span class="token operator">&lt;</span><span class="token operator">/</span>aside<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>效果标签</strong></em></p><hr></li><li><p>换行标签：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>直接在换行的部分输入<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>空格标签：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&amp;</span>nbsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>水平分割线：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>列表标签</strong></em></p><hr></li><li><p>无序列表：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#<span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span>内容<span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span> 我的第一个列表信息<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>我的第二个列表信息<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有序列表：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#<span class="token operator">&lt;</span>ol<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span>内容<span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>ol<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>ol<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我的第一个列表信息<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我的第二个列表信息<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为网页添加图片</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"E:/HTML/笔记/图片的地址"</span> alt<span class="token operator">=</span><span class="token string">"图片下载失败时的替换文本"</span> title<span class="token operator">=</span><span class="token string">"提示文本"</span> <span class="token operator">/</span><span class="token operator">></span>src<span class="token operator">:</span>图像的位置   alt<span class="token operator">:</span>替换文本  title<span class="token operator">:</span>当鼠标划过该图片时显示的文字  图像可以是<span class="token constant">GIF</span>、<span class="token constant">PNG</span>、<span class="token constant">IPEG</span>格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>网页链接</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"网址"</span>  title<span class="token operator">=</span><span class="token string">"提示文本"</span><span class="token operator">></span>链接显示的文本<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在浏览器窗口打开链接</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span> target<span class="token operator">=</span><span class="token string">"_self"</span><span class="token operator">></span>百度<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">:</span>target<span class="token operator">=</span><span class="token string">"_self"</span>在当前页面打开链接target<span class="token operator">=</span>”_blank"<span class="token operator">:</span>新建窗口打开链接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>表格标签</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>table<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">:</span>用来定义整个表格border<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">:</span>用来加边框<span class="token operator">&lt;</span>caption<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>caption<span class="token operator">></span><span class="token operator">:</span>表格的标题<span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>表示一行<span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span><span class="token operator">:</span>一列，有加粗效果<span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">:</span>一列，无加粗效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>学习表格标签<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>caption<span class="token operator">></span>前端三剑客<span class="token operator">&lt;</span><span class="token operator">/</span>caption<span class="token operator">></span>        <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>知识点<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>重要程度<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>难度<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>学习周期<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span>html<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">5</span>星<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">3</span>星<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">7</span>天<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span>css<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">5</span>星<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">4</span>星<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">10</span>天<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span>js<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">5</span>星<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">5</span>星<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">20</span>天<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210420201516775.png" alt="image-20210420201516775"></p><p>使用thead、tbody、tfooyt定义表格</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span><span class="token operator">&lt;</span>thead<span class="token operator">></span>标签表示表格头部<span class="token punctuation">,</span>一般放<span class="token operator">&lt;</span>tr<span class="token operator">></span>和<span class="token operator">&lt;</span>th<span class="token operator">></span>标签。<span class="token number">2.</span><span class="token operator">&lt;</span>tbody<span class="token operator">></span>标签表示表格内容<span class="token punctuation">,</span>一般放<span class="token operator">&lt;</span>tr<span class="token operator">></span>和<span class="token operator">&lt;</span>td<span class="token operator">></span>标签。<span class="token number">3</span>、<span class="token operator">&lt;</span>tfoot<span class="token operator">></span>标签标签表格脚部标注<span class="token punctuation">,</span>一般放<span class="token operator">&lt;</span>tr<span class="token operator">></span>和<span class="token operator">&lt;</span>td<span class="token operator">></span>标签。<span class="token number">4</span>、对表格中的行进行分组，这种划分使浏览器有能力支持独立于表格标题和页脚的正文滚动，当长的表格被打印时，表格的表头和页脚也就可被打印在包含表格数据的每张页面上。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><p>1.表单是可以把浏览器输入的数据传送到服务器端，这样服务器端的程序就可以处理表单传过来的数据。</p><p>2.语法:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>form method<span class="token operator">=</span><span class="token string">"传送方式"</span>  action<span class="token operator">=</span><span class="token string">"服务器文件"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.用户名密码：</p><p>type:</p><ul><li>text：输入框为文本输入框</li><li>password：密码输入框</li></ul><p>name:为文本框命名</p><p>value:为文本框设置默认值，一般起到提示作用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text/password"</span> name<span class="token operator">=</span><span class="token string">"名称"</span> value<span class="token operator">=</span><span class="token string">"文本"</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><p>给点提示：placeholder属性的使用</p><p>placeholder属性为输入框占位符，里面可以放提示的输入信息。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>input<span class="token operator">-</span>placeholder<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入用户名"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入密码"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210426193217809.png" alt="image-20210426193217809"></p></li><li><p>数字输入框</p><p>type=”number”数字框只能输入数字，最后面有个加减号用来调整数字大小。</p></li><li><p>网址输入框</p><p>type=”url” 内容必须以http：或者https：开头</p></li><li><p>邮箱输入框：type=”email”</p></li><li><p>创建文本域：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>textarea cols<span class="token operator">=</span><span class="token string">"行数“ orws="</span>列数” <span class="token operator">></span>在这里输入内容<span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>form<span class="token operator">></span>        <span class="token operator">&lt;</span>textarea cols<span class="token operator">=</span><span class="token string">"50"</span> rows<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span>在这里输入内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><p>​        9.label标签，为input标签穿上衣服：</p><p>​          注意：for属性中的值应当与相关控件的id属性值相同</p><p>​          当点击该标签时，自动跳转到下相对应控件的位置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">javascript<span class="token operator">&lt;</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"uname"</span><span class="token operator">></span>输入你的用户名<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"uname"</span> placeholder<span class="token operator">=</span><span class="token string">"Enter name"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>     <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"pass"</span><span class="token operator">></span>请输入密码<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"pass"</span> placeholder<span class="token operator">=</span><span class="token string">"Enter password"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 10.单选框和复选框</p><ul><li><p>type：当type=”radio”时，控件为单选框</p><p>​            当type=”checkbox”时，控件为复选框</p></li><li><p>value:提交到后台服务器，共后台使用</p></li><li><p>name：为控件命名，以备后台程序ASP、PHP使用，单选时选项的名字必须相同</p></li><li><p>当设置checked=”checked”时，该选项被默认选中</p><img src="http://img.mukewang.com/52e5f7c60001a23f07360267.jpg" alt="img" style="zoom: 80%;" /></li></ul><p>​        <img src="http://img.mukewang.com/52e5f8010001159804900257.jpg" alt="img"></p><p>11.创建下拉菜单</p><ul><li><p>select和option标签都是双标签</p></li><li><p>select标签内只能放option标签，表示下拉菜单的选项</p></li><li><p>option标签放选型内容，不放置其他标签</p></li><li><p>value：提交到服务器的值</p></li><li><p>当设置成selected=”selected”时，该选项被默认选中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>   <span class="token operator">&lt;</span>form<span class="token operator">></span>        <span class="token operator">&lt;</span>select<span class="token operator">></span>         <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"看书"</span><span class="token operator">></span>看书<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>         <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"游戏"</span> selected<span class="token operator">=</span><span class="token string">"selected"</span><span class="token operator">></span>游戏<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>12.提交按钮</p><p>​      type=”submit” value=”按钮上显示的字”</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>form method<span class="token operator">=</span><span class="token string">"post"</span> action<span class="token operator">=</span><span class="token string">"save.php"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"myName"</span><span class="token operator">></span>姓名：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">" "</span> name<span class="token operator">=</span><span class="token string">"myName "</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> name<span class="token operator">=</span><span class="token string">"submitBtn"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.mukewang.com/52e6126f0001496a04480218.jpg" alt="img"></p><p>13.重置按钮</p><p>type=”reset” 与提交按钮类似</p>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="2021/05/31/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>2021/05/31/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h1><p>css样式由选择符和声明组成，声明又由属性和值组成</p><p><img src="http://img.mukewang.com/52fde5c30001b0fe03030117.jpg" alt="img"></p><ol><li><p>给段落文字添加样式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span>p<span class="token punctuation">&#123;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span><span class="token number">12</span>px<span class="token punctuation">;</span><span class="token comment">//字体大小</span>    color<span class="token operator">:</span>red；<span class="token comment">//字体颜色</span>    font<span class="token operator">-</span>weight<span class="token operator">:</span>bold<span class="token punctuation">;</span><span class="token comment">//字体加粗</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为短语设置</p><p>将文字放置：<span>文字</span></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    span<span class="token punctuation">&#123;</span>        color<span class="token operator">:</span>red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>     <span class="token operator">&lt;</span>p<span class="token operator">></span>慕课网<span class="token operator">&lt;</span>span<span class="token operator">></span>超酷的互联网<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加注释语句：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*内容*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>内联式css样式</p><p>就是把css代码直接写在HTML标签中，并且写在开始标签中，写在双引号中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token string">"font-size:12px;color:red;"</span><span class="token operator">></span>内容<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>嵌入式css样式：</p><p>就是把css代码写在<style type="text/cs"></style>之间</p><p>嵌入式样式一般写在<head></head>之间</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>嵌入式css样式<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    span <span class="token punctuation">&#123;</span>        color<span class="token operator">:</span>blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外联式css样式：</p><p>就是把代码单独写在文件内，该文件后缀为css，再在html文件中使用<link>标签经css文件链接到html文件内。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"base.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：</p><ul><li>css文件名称以有意义的英文字母命名，如main.css</li><li>rel=”stylesheet” type=”text/css”是固定写法不可修改</li><li><link>标签位置一般在<head>标签内部</li></ul><p><em><strong>以上三种样式实施就近原则，即：内联式&gt;嵌入式&gt;外联式</strong></em></p></li></ol><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><ol><li><p><strong>标签选择器</strong>：就是html代码中的标签，例如：<html><body><h1><p><img></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">h1<span class="token punctuation">&#123;</span>    font<span class="token operator">-</span>weight<span class="token operator">:</span>normal<span class="token punctuation">;</span>    color<span class="token operator">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>类选择器：</strong></p><ul><li><p>语法：.类选择器名称{ 代码}，要以英文圆点开头。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    <span class="token punctuation">.</span>stress <span class="token punctuation">&#123;</span>        color<span class="token operator">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置类：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"stress"</span><span class="token operator">></span>勇气<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>ID选择器</strong>：</p><ul><li><p>使用id选择器必须为标签添加id属性</p></li><li><p>Id选择符的前面是#（井号），不是英文原点</p></li><li><p>id属性的值尽量见名思意，语义化。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    #stress<span class="token punctuation">&#123;</span>color<span class="token operator">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"stress"</span><span class="token operator">></span>内容<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>*<em>id选择器和类选泽器的区别：</em></p><ul><li>相同点：可以应用于任何元素</li><li>不同点：<ul><li>ID选择器只能在文档中使用一次，类选择器可以使用多次</li><li>可以使用类选择器词列表方法为一个元素同时设置多个样式，ID选择器不可以。</li></ul></li></ul></li></ul></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>stress<span class="token punctuation">&#123;</span>      color<span class="token operator">:</span>red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span>bigsize<span class="token punctuation">&#123;</span>      font<span class="token operator">-</span>size<span class="token operator">:</span><span class="token number">25</span>px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>到了<span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"stress bigsize"</span><span class="token operator">></span>三年级<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>下学期时，我们班上了一节公开课<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><p>子选择器</p><p>即大于符号(&gt;),用于选择指定目标元素的<strong>第一代</strong>子元素。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>子选择器<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    <span class="token comment">/*添加边框样式（粗细为1px， 颜色为红色的实线）*/</span>    <span class="token punctuation">.</span>food<span class="token operator">></span>li <span class="token punctuation">&#123;</span>        border<span class="token operator">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"food"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>水果            <span class="token operator">&lt;</span>ul<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>香蕉<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>苹果<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>梨<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>蔬菜            <span class="token operator">&lt;</span>ul<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>白菜<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>油菜<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>卷心菜<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210427194831518.png" alt="image-20210427194831518"></p></li><li><p>后代选择器</p><p>即加入空格，用于选择指定元素标签下的后辈元素（所有后代元素）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>food li <span class="token punctuation">&#123;</span>        <span class="token comment">/*添加边框样式（粗细为1px， 颜色为红色的实线）*/</span>        border<span class="token operator">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"food"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>水果            <span class="token operator">&lt;</span>ul<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>香蕉<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>苹果<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>梨<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>蔬菜            <span class="token operator">&lt;</span>ul<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>白菜<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>油菜<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>卷心菜<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210427195121124.png" alt="image-20210427195121124"></p></li><li><p>通用选择器</p><p>使用*号指定，作用是匹配html中所有标签元素。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    <span class="token operator">*</span> <span class="token punctuation">&#123;</span>        color<span class="token operator">:</span> red<span class="token punctuation">;</span>        font<span class="token operator">-</span>size<span class="token operator">:</span><span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>勇气<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>三年级时，我还是一个胆小如鼠的小女孩，上课从来不敢回答老师提出的问题，生怕回答错了老师会批评我。就一直没有这个勇气来回答老师提出的问题。学校举办的活动我也没勇气参加。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>到了三年级下学期时，我们班上了一节公开课，老师提出了一个很简单的问题，班里很多同学都举手了，甚至成绩比我差很多的，也举手了，还说着：<span class="token string">"我来，我来。"</span>我环顾了四周，就我没有举手。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://img.mukewang.com/52b4113500018cf102000200.jpg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210427195407578.png" alt="image-20210427195407578"></p></li><li><p>伪类选择器</p><p>它允许给html中不存在的标签（标签的某种状态）设置样式，例如给一个标签元素的<strong>鼠标滑过状态</strong>来设置字体颜色。</p><p>关于伪选择符：a：hover目前可以兼容所有浏览器。其实，：hover可以放在任意的标签，比如p：hover，但是他们的兼容性不是很好。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    a<span class="token operator">:</span>hover <span class="token punctuation">&#123;</span>        color<span class="token operator">:</span> red<span class="token punctuation">;</span>        font<span class="token operator">-</span>size<span class="token operator">:</span><span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>勇气<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"first"</span><span class="token operator">></span>三年级时，我还是一个<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.imooc.com"</span><span class="token operator">></span>胆小如鼠<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>的小女孩，上课从来不敢回答老师提出的问题，生怕回答错了老师会批评我。就一直没有这个勇气来回答老师提出的问题。学校举办的活动我也没勇气参加。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"second"</span><span class="token operator">></span>到了三年级下学期时，我们班上了一节公开课，老师提出了一个很<span class="token operator">&lt;</span>span<span class="token operator">></span>简单<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>的问题，班里很多同学都举手了，甚至成绩比我差很多的，也举手了，还说着：<span class="token string">"我来，我来。"</span>我环顾了四周，就我没有举手。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://img.mukewang.com/52b4113500018cf102000200.jpg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210427200045536.png" alt="image-20210427200045536"></p></li><li><p>分组选择器</p><p>当你想为html中多个标签元素设置同一个样式，可以使用分组选择器（，）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>first<span class="token punctuation">,</span>#second span<span class="token punctuation">&#123;</span>       color<span class="token operator">:</span>green<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>勇气<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"first"</span><span class="token operator">></span>三年级时，我还是一个<span class="token operator">&lt;</span>span<span class="token operator">></span>胆小如鼠<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>的小女孩，上课从来不敢回答老师提出的问题，生怕回答错了老师会批评我。就一直没有这个勇气来回答老师提出的问题。学校举办的活动我也没勇气参加。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"second"</span><span class="token operator">></span>到了三年级下学期时，我们班上了一节公开课，老师提出了一个很<span class="token operator">&lt;</span>span<span class="token operator">></span>简单<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>的问题，班里很多同学都举手了，甚至成绩比我差很多的，也举手了，还说着：<span class="token string">"我来，我来。"</span>我环顾了四周，就我没有举手。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://img.mukewang.com/52b4113500018cf102000200.jpg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210427200604328.png" alt="image-20210427200604328"></p></li></ol><h1 id="css3的继承与选择器优先级"><a href="#css3的继承与选择器优先级" class="headerlink" title="css3的继承与选择器优先级"></a>css3的继承与选择器优先级</h1><ol><li><p>样式的继承</p><p>继承是一种规则，它允许样式不仅应用于某个特定的html元素，而且应用于其后代。但是某些css样式不允许继承，例如：border：1px solid red；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    p <span class="token punctuation">&#123;</span>        color<span class="token operator">:</span> red<span class="token punctuation">;</span>        border<span class="token operator">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"first"</span><span class="token operator">></span>三年级时，我还是一个<span class="token operator">&lt;</span>span<span class="token operator">></span>胆小如鼠<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>的小女孩，上课从来不敢回答老师提出的问题，生怕回答错了老师会批评我。就一直没有这个勇气来回答老师提出的问题。学校举办的活动我也没勇气参加。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"second"</span><span class="token operator">></span>到了三年级下学期时，我们班上了一节公开课，老师提出了一个很<span class="token operator">&lt;</span>span<span class="token operator">></span>简单<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>的问题，班里很多同学都举手了，甚至成绩比我差很多的，也举手了，还说着：<span class="token string">"我来，我来。"</span>我环顾了四周，就我没有举手。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>选择器的优先级</p><p>内联样式&gt;id选择器&gt;类选择器&gt;标签选择器&gt;通配符选择器（*）</p></li><li><p>权值计算—特殊性</p><p>先执行权值高的css样式</p><p><strong>标签的权值为1；类选择符的权值为10；ID选择符的权值为100；继承的权值比较也特殊，有的文献显示它为0.1，可以理解为继承的权值最低。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">p<span class="token punctuation">&#123;</span>color<span class="token operator">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*权值为1*/</span>p span<span class="token punctuation">&#123;</span>color<span class="token operator">:</span>green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*权值为1+1=2*/</span><span class="token punctuation">.</span>warning<span class="token punctuation">&#123;</span>color<span class="token operator">:</span>white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*权值为10*/</span>p span<span class="token punctuation">.</span>warning<span class="token punctuation">&#123;</span>color<span class="token operator">:</span>purple<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*权值为1+1+10=12*/</span>#footer <span class="token punctuation">.</span>note p<span class="token punctuation">&#123;</span>color<span class="token operator">:</span>yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*权值为100+10+1=111*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>选择器最高优先级</p><p>在分号前面加入！important</p></li></ol><h1 id="换字体"><a href="#换字体" class="headerlink" title="换字体"></a>换字体</h1><ol><li><p>使用font-family换字体样式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">body<span class="token punctuation">&#123;</span>    font<span class="token operator">-</span>family<span class="token operator">:</span><span class="token string">"宋体"</span><span class="token punctuation">;</span>    font<span class="token operator">-</span>family<span class="token operator">:</span><span class="token string">"Microsoft Yahei"</span><span class="token punctuation">;</span> 或者 font<span class="token operator">-</span>family<span class="token operator">:</span><span class="token string">"微软雅黑"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：不要设置不常用的字体，用户是否显示字体取决于该电脑上是否安装字体。</p></li><li><p>font-size换字体大小</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">body <span class="token punctuation">&#123;</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>font-weight设置字体粗细</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">,</span>span <span class="token punctuation">&#123;</span>        font<span class="token operator">-</span>weight<span class="token operator">:</span> bold<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置字体倾斜样式</p><p>font-style:normal  //正常</p><p>font-style:italic  //斜体</p><p>font-style:oblique //强制将字体倾斜</p></li><li><p>设置颜色</p><ul><li><p>英文命令颜色：color:red;</p></li><li><p>RGB颜色：与photoshop颜色一致，由Red（红色）、Green（绿色）、Blue（蓝色）三种颜色按比例配色，每一项可以是0-255的整数，也可以是百分数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">color<span class="token operator">:</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>十六进制颜色</p><p>原理也是RGB设置，但是每一项的值由数字变成了00–ff</p><p>color：#00ffff；</p><p><img src="http://img.mukewang.com/54c5b4120001f20808000902.jpg" alt="img"></p></li></ul></li><li><p>font样式的简写方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">body<span class="token punctuation">&#123;</span>    font<span class="token operator">-</span>style<span class="token operator">:</span>italic<span class="token punctuation">;</span>    font<span class="token operator">-</span>weight<span class="token operator">:</span>bold<span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span><span class="token number">12</span>px<span class="token punctuation">;</span>    font<span class="token operator">-</span>height<span class="token operator">:</span><span class="token number">1.5</span>em<span class="token punctuation">;</span>    font<span class="token operator">-</span>family<span class="token operator">:</span><span class="token string">"宋体"</span>，sans<span class="token operator">-</span>serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以简写成</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">body<span class="token punctuation">&#123;</span>    font<span class="token operator">:</span>italic bold <span class="token number">12</span>px<span class="token operator">/</span><span class="token number">1.5</span>em <span class="token string">"宋体"</span><span class="token punctuation">,</span>sans<span class="token operator">-</span>serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>使用这一简写方式至少要指定fony-size和font-family属性，其他属性（font-weight、font-style、font-variant、line-height)如果未指定则使用默认值。</p></li><li><p>在缩写font-size和line-height中间要加入“/“斜杠。</p></li><li><p>一般情况下面比较常用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">body<span class="token punctuation">&#123;</span>    font<span class="token operator">:</span><span class="token number">12</span>px<span class="token operator">/</span><span class="token number">1.5</span>em <span class="token string">"宋体"</span><span class="token punctuation">,</span>sanss<span class="token operator">-</span>serif<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h1 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h1><ol><li><p>使用text-decoration为文本添加样式</p><p>text -decoration的默认样式为none</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    <span class="token punctuation">.</span>box1<span class="token punctuation">&#123;</span>        text<span class="token operator">-</span>decoration<span class="token operator">:</span>overline  <span class="token comment">/*在文本上添加装饰线*/</span>        text<span class="token operator">-</span>decoration<span class="token operator">:</span>underline <span class="token comment">/*在文本下添加装饰线*/</span>        text<span class="token operator">-</span>decoration<span class="token operator">:</span>line<span class="token operator">-</span>through <span class="token comment">/*装饰线穿过文本,一般用于商品折扣价*/</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>首行缩进</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">p<span class="token punctuation">&#123;</span>    text<span class="token operator">-</span>indent<span class="token operator">:</span><span class="token number">2</span>em<span class="token punctuation">;</span> <span class="token comment">/*2em意思为文字的2倍大小*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>行间距</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">p<span class="token punctuation">&#123;</span>    line<span class="token operator">-</span>height<span class="token operator">:</span><span class="token number">2</span>em<span class="token punctuation">;</span><span class="token comment">/*行间距为2倍*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为中文、英文设置间距</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">h1<span class="token punctuation">&#123;</span>    letter<span class="token operator">-</span>spacing<span class="token operator">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token comment">/*英文字母间距为50px或者中文文字的间距*/</span>    word<span class="token operator">-</span>spacing<span class="token operator">:</span><span class="token number">50</span>px；<span class="token comment">/*英文单词的间距*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置文本对齐方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">h1<span class="token punctuation">&#123;</span>    text<span class="token operator">-</span>align<span class="token operator">:</span>center<span class="token punctuation">;</span><span class="token comment">/*居中*/</span>    text<span class="token operator">-</span>align<span class="token operator">:</span>left<span class="token punctuation">;</span><span class="token comment">/*左对齐*/</span>    text<span class="token operator">-</span>align<span class="token operator">:</span>right<span class="token punctuation">;</span><span class="token comment">/*右对齐*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>长度值</p><p>长度单位目前常用：px(像素)、em、%百分比，这三种单位都是相对单位。</p><ul><li><p>像素</p><p>像素指的是显示器上的小点（css规范中假设“90像素=1英寸’’).实际情况是浏览器会使用显示器的实际像素有关。</p></li><li><p>em</p><p>就是本元素给定字体的font-size的值，如果元素的font-size为18px，那么1em=18px。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">p<span class="token punctuation">&#123;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span><span class="token number">12</span>px<span class="token punctuation">;</span>    text<span class="token operator">-</span>indent<span class="token operator">:</span><span class="token number">2</span>em<span class="token punctuation">;</span><span class="token comment">/*首行缩进24px，两个文字的距离*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当给font-size的值设置为em时，此时计算的标准以p的父元素的font-size为基础。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">p<span class="token punctuation">&#123;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span><span class="token number">14</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>span<span class="token punctuation">&#123;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span><span class="token number">0.8</span>em<span class="token punctuation">;</span><span class="token comment">/*字体大小为11.2px 12*0.8=11.2；*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>百分比</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">p<span class="token punctuation">&#123;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span><span class="token number">12</span>px<span class="token punctuation">;</span>    line<span class="token operator">-</span>height<span class="token operator">:</span><span class="token number">130</span><span class="token operator">%</span> <span class="token comment">/*行间距为字体的130%*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h1 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h1><ol><li><p>标签元素分为三类：<strong>块状元素、内联元素（又叫行内元素）、内联块状元素。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">块状元素：<span class="token operator">&lt;</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span>h6<span class="token operator">></span> <span class="token operator">&lt;</span>ol<span class="token operator">></span> <span class="token operator">&lt;</span>ul<span class="token operator">></span> <span class="token operator">&lt;</span>dl<span class="token operator">></span> <span class="token operator">&lt;</span>table<span class="token operator">></span> <span class="token operator">&lt;</span>address<span class="token operator">></span> <span class="token operator">&lt;</span>blockquote<span class="token operator">></span> <span class="token operator">&lt;</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">内联元素<span class="token operator">&lt;</span>a<span class="token operator">></span> <span class="token operator">&lt;</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span> <span class="token operator">&lt;</span>i<span class="token operator">></span> <span class="token operator">&lt;</span>em<span class="token operator">></span> <span class="token operator">&lt;</span>strong<span class="token operator">></span> <span class="token operator">&lt;</span>label<span class="token operator">></span> <span class="token operator">&lt;</span>q<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token operator">></span> <span class="token operator">&lt;</span>cite<span class="token operator">></span> <span class="token operator">&lt;</span>code<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">内联块状元素<span class="token operator">&lt;</span>img<span class="token operator">></span> <span class="token operator">&lt;</span>input<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>块状元素：</p><p>特点：</p><ul><li>块状元素独占一行，并且其后的元素另起一行，</li><li>元素的高度、宽度、行高以及底边间距都可以设置</li><li>元素宽度在不设置的情况下，是它本身父容器的100%（和父容器的宽度一样）。</li></ul><p><strong>将其他类型元素转化为块状元素</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">&#123;</span>    display<span class="token operator">:</span>block<span class="token punctuation">;</span><span class="token comment">/*将内联元素转化成块状元素*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>内联元素</p><p>特点：</p><ul><li>和其他元素都在一行</li><li>元素的高度、宽度、顶部和底部的间距<strong>不可</strong>设置</li><li>元素的宽度就是它包含的文字或者图片的宽度，不可改变。</li><li>内联元素之间有间距。</li></ul><p><strong>将其他类型转化为内联元素</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    display<span class="token operator">:</span>inline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>内联块状元素</p><p>特点：</p><ul><li>和其他元素在一行上</li><li>元素的宽度、高度、行高以及顶部和底部的间距可以设置</li></ul><p>转化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    display<span class="token operator">:</span>inline<span class="token operator">-</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>将元素隐藏</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">p<span class="token punctuation">&#123;</span>    display<span class="token operator">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>盒子模型</p><p>盒子模型包括<strong>内填充（padding）、外边距（margin）、边框（border）</strong>，他们都有四个方向(top、bottom、left、right)</p><p>盒子模型的实际高度是元素本身的大小加上上下内填充和上下边框、上下边距，宽度是元素本身大小加上左右内填充和左右边框、左右边距。</p><p><img src="http://img.mukewang.com/543b4cae0001b34304300350.jpg" alt="img"></p><p><img src="http://img.mukewang.com/539fbb3a0001304305570259.jpg" alt="img"></p></li><li><p>设置背景色</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    backgroud<span class="token operator">-</span>color<span class="token operator">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加边框</p><p>三个属性：粗细、样式、颜色</p><p>两种写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    border<span class="token operator">:</span><span class="token number">2</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    border<span class="token operator">-</span>width<span class="token operator">:</span><span class="token number">2</span>px<span class="token punctuation">;</span>    border<span class="token operator">-</span>style；solid；    border<span class="token operator">-</span>color<span class="token operator">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>边框样式：<ul><li>实线：solid</li><li>虚线：dashed</li><li>点线：dotted</li></ul></li><li>颜色：样式与字体相同</li><li>宽度：一般用像素表示，也可设置为thin|medium|thick</li></ul></li><li><p>单独为一个方向设置边框</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    border<span class="token operator">-</span>top<span class="token operator">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>    border<span class="token operator">-</span>bottom<span class="token operator">:</span><span class="token number">2</span>px dotted red<span class="token punctuation">;</span>    border<span class="token operator">-</span>left<span class="token operator">:</span><span class="token number">1</span>px dashed green<span class="token punctuation">;</span>    border<span class="token operator">-</span>right<span class="token operator">:</span><span class="token number">2</span>px dashed green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为边框设置圆角</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span><span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">20</span>px <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*依次为左上，右上，右下，左下</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以分开写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    border<span class="token operator">-</span>top<span class="token operator">-</span>left<span class="token operator">-</span>radius<span class="token operator">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>    border<span class="token operator">-</span>top<span class="token operator">-</span>right<span class="token operator">-</span>radius<span class="token operator">:</span><span class="token number">20</span>px<span class="token punctuation">;</span>    border<span class="token operator">-</span>bottom<span class="token operator">-</span>left<span class="token operator">-</span>radius<span class="token operator">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>    border<span class="token operator">-</span>bottom<span class="token operator">-</span>right<span class="token operator">-</span>radius<span class="token operator">:</span><span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果四个圆角都为10px</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果左上角和右下角一样为10px，右上角和左下角一样为20px</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">dov<span class="token punctuation">&#123;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span><span class="token number">10</span>px <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>特别注意：一个正方形，当设置圆角效果为元素宽度的一半时，显示效果为圆形。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    width<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    border<span class="token operator">:</span><span class="token number">5</span>px solid red<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img1.mukewang.com/5e957ad10001740003340337.jpg" alt="img"></p></li><li><p>为盒子设置内填充</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    padding<span class="token operator">:</span><span class="token number">20</span>px <span class="token number">10</span>px <span class="token number">20</span>px <span class="token number">30</span>px <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*上、右、下、左 顺时针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以分开写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    padding<span class="token operator">-</span>top<span class="token operator">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>    padding<span class="token operator">-</span>right<span class="token operator">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>    padding<span class="token operator">-</span>bottom<span class="token operator">:</span><span class="token number">15</span>px<span class="token punctuation">;</span>    padding<span class="token operator">-</span>left<span class="token operator">:</span><span class="token number">15</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果四个一样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    padding<span class="token operator">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果上下一样、左右一样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    padding<span class="token operator">:</span><span class="token number">10</span>px <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置外边距</p><p>与内填充类似。</p><p><strong>padding与margin区别为：padding在边框里面，margin在边框外面。</strong></p></li></ol><h1 id="css3布局模型"><a href="#css3布局模型" class="headerlink" title="css3布局模型"></a>css3布局模型</h1><ol><li><p>流动模型（Flow)</p><blockquote><p>流动模型是网页默认的布局模型，主要特征：</p><p>1.块状元素都会在所处的包含元素内自上而下按顺序<strong>垂直延申</strong>，因为在默认状态下，块状元素的宽度为100%。实际上，<strong>块状元素会以行的形式占据位置。</strong></p><p>2.内联元素都会在包含元素内<strong>从左到右水平</strong>分布显示。</p></blockquote></li><li><p>浮动模型(Float)</p><blockquote><p>如果想让块状元素并排显示，可以设置浮动模型。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    width<span class="token operator">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    border<span class="token operator">:</span><span class="token number">2</span>px solid red<span class="token punctuation">;</span>    float<span class="token operator">:</span>left<span class="token punctuation">;</span><span class="token comment">//左浮动    float:right;//右浮动&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.mukewang.com/540e62c60001c56a06760417.jpg" alt="img"></p><p><img src="http://img.mukewang.com/540e632b0001f5f506760417.jpg" alt="img"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    width<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    border<span class="token operator">:</span><span class="token number">2</span>px solid red<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>#div1<span class="token punctuation">&#123;</span>float<span class="token operator">:</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#div2<span class="token punctuation">&#123;</span>float<span class="token operator">:</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//左右浮动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>层模型</p><blockquote><p>层布局模型就像是Photoshop中非常流行的图层编辑功能一样，每个图层都能够精确的定位操作。</p><p>层模型有三种形式：</p><p>1.绝对定位：position :absolute</p><p>2.相对定位：position :relative</p><p>3.固定定位：position :fixed</p></blockquote><ul><li><p>绝对定位</p><blockquote><p>将元素从文档中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个<strong>具有定位属性的父包含快</strong>进行绝对定位，如果不存在这样的包含块，则相对于body元素，即浏览器窗口。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">&#123;</span>    width<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    border<span class="token operator">:</span><span class="token number">2</span>px solid red<span class="token punctuation">;</span>    position<span class="token operator">:</span>absolute<span class="token punctuation">;</span>    left<span class="token operator">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    top<span class="token operator">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token comment">/*相对于浏览器窗口向右移动100px，向下移动50px；&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.mukewang.com/53a00b130001e86707360547.jpg" alt="img"></p></li><li><p>相对定位</p><blockquote><p>它通过left、right、top、bottom属性确定元素在<strong>正常文档流中</strong>的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于<strong>以前的位置移动，</strong>移动的方向和幅度由left、right、top、bottom属性确定，<strong>偏移前的位置保留不动。</strong></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#div1<span class="token punctuation">&#123;</span>    width<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    border<span class="token operator">:</span><span class="token number">2</span>px red solid<span class="token punctuation">;</span>    position<span class="token operator">:</span>relative<span class="token punctuation">;</span>    left<span class="token operator">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    top<span class="token operator">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.mukewang.com/53a00d2b00015c4b06190509.jpg" alt="img"></p><p>什么叫偏移前的位置保持不动呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>偏移前的位置还保留不动，覆盖不了前面的div没有偏移前的位置<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.mukewang.com/541a4bfc0001abef05940489.jpg" alt="img"></p><blockquote><p>从效果图中可以明显的看出，虽然div元素相对于以前的位置产生了偏移，但是div元素以前的位置还是保留着，所以后面的span元素是显示在了div元素以前位置的后面。</p></blockquote></li><li><p>固定定位</p><blockquote><p>fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（<strong>屏幕内的网页窗口</strong>）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与background-attachment:fixed;属性功能相同。以下代码可以实现相对于<strong>浏览器视图</strong>向右移动100px，向下移动50px。并且拖动滚动条时位置固定不变。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#div1<span class="token punctuation">&#123;</span>    width<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    border<span class="token operator">:</span><span class="token number">2</span>px red solid<span class="token punctuation">;</span>    position<span class="token operator">:</span>fixed<span class="token punctuation">;</span>    right：<span class="token number">0</span>；    bottom：<span class="token number">0</span>；<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210507194811812.png" alt="image-20210507194811812"></p></li><li><p>绝对定位与相对定位组合使用</p><blockquote><p>使用<code>position:absolute</code>可以实现被设置元素相对于浏览器（body）设置定位以后，大家有没有想过可不可以相对于其它元素进行定位呢？答案是肯定的，当然可以。使用position:relative来帮忙，但是必须遵守下面规范：</p></blockquote><p>参照定位的元素必须是相对定位元素的前辈元素：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>参照定位的元素<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span>相对参照元素进行定位<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>相对定位元素<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment">/*box1是box2的父元素*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参照定位元素加入position:relative</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#box1<span class="token punctuation">&#123;</span>    width<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    position<span class="token operator">:</span>relative<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定位元素加入position:absolute</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#box2<span class="token punctuation">&#123;</span>    position<span class="token operator">:</span>absolute<span class="token punctuation">;</span>    top<span class="token operator">:</span><span class="token number">20</span>px<span class="token punctuation">;</span>    left<span class="token operator">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210507195709945.png" alt="image-20210507195709945"></p><blockquote><p>图片为box3，文字为box4</p></blockquote></li></ul></li><li><p>弹性盒模型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>box <span class="token punctuation">&#123;</span>        background<span class="token operator">:</span> blue<span class="token punctuation">;</span>        display<span class="token operator">:</span> flex<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>box div <span class="token punctuation">&#123;</span>        width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>box1 <span class="token punctuation">&#123;</span>        background<span class="token operator">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>box2 <span class="token punctuation">&#123;</span>        background<span class="token operator">:</span> orange<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>box3 <span class="token punctuation">&#123;</span>        background<span class="token operator">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box3"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210507200329813.png" alt="image-20210507200329813"></p><blockquote><p>技术点解释：1.设置display：flex属性可以把块级元素在一排显示。</p><p>​                        2.必须在父容器中添加flex。</p><p>​                        3.默认为从左到右依次排列，且和父元素之间没有空隙。</p></blockquote></li><li><p>设置横轴排列方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">justify<span class="token operator">-</span>content<span class="token operator">:</span>flex<span class="token operator">-</span>start<span class="token operator">|</span>flex<span class="token operator">-</span>end<span class="token operator">|</span>center<span class="token operator">|</span>space<span class="token operator">-</span>between<span class="token operator">|</span>space<span class="token operator">-</span>around<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*交叉轴的起点对齐*/</span><span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>    backgroud<span class="token operator">:</span>blue<span class="token punctuation">;</span>    diaplay<span class="token operator">:</span>flex<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token operator">:</span>flex<span class="token operator">-</span>start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img.mukewang.com/5e959b080001a38d25340322.jpg" alt="img"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*右对齐*/</span><span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>     backgroud<span class="token operator">:</span>blue<span class="token punctuation">;</span>    diaplay<span class="token operator">:</span>flex<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token operator">:</span>flex<span class="token operator">-</span>end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img1.mukewang.com/5e959b8b0001d43b25420308.jpg" alt="img"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*居中*/</span><span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>     backgroud<span class="token operator">:</span>blue<span class="token punctuation">;</span>    diaplay<span class="token operator">:</span>flex<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token operator">:</span>center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img2.mukewang.com/5e959bdd0001ad2125300303.jpg" alt="img"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*两端对齐，项目之间的间隔相等*/</span><span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>     backgroud<span class="token operator">:</span>blue<span class="token punctuation">;</span>    diaplay<span class="token operator">:</span>flex<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token operator">:</span>space<span class="token operator">-</span>between<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img2.mukewang.com/5e959c6400017b1c25530313.jpg" alt="img"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*每个项目两侧的间隔相等，项目之间都间隔比项目与边框的间隔大一倍。*/</span><span class="token punctuation">.</span>box <span class="token punctuation">&#123;</span>        background<span class="token operator">:</span> blue<span class="token punctuation">;</span>        display<span class="token operator">:</span> flex<span class="token punctuation">;</span>        justify<span class="token operator">-</span>content<span class="token operator">:</span> space<span class="token operator">-</span>around<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img2.mukewang.com/5e959caf000113b125370303.jpg" alt="img"></p></li><li><p>设置纵轴排列方式</p><blockquote><p>属性值</p><p>align-items：flex-start|flex-end|center|baseline|stetch;</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*默认值 左对齐 flex-start*/</span><span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>    height<span class="token operator">:</span><span class="token number">700</span>px<span class="token punctuation">;</span>    backgroud<span class="token operator">:</span>blue<span class="token punctuation">;</span>    display<span class="token operator">:</span>flex<span class="token punctuation">;</span>    align<span class="token operator">-</span>items<span class="token operator">:</span>flex<span class="token operator">-</span>start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img3.mukewang.com/5e95a3720001140325381051.jpg" alt="img"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*交叉轴的终点对齐 flex-end*/</span><span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>    height<span class="token operator">:</span><span class="token number">700</span>px<span class="token punctuation">;</span>    backgroud<span class="token operator">:</span>blue<span class="token punctuation">;</span>    display<span class="token operator">:</span>flex<span class="token punctuation">;</span>    align<span class="token operator">-</span>items<span class="token operator">:</span>flex<span class="token operator">-</span>end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img2.mukewang.com/5e95a3ca0001550a25381056.jpg" alt="img"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*交叉轴的中点对齐 center*/</span><span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>    height<span class="token operator">:</span><span class="token number">700</span>px<span class="token punctuation">;</span>    backgroud<span class="token operator">:</span>blue<span class="token punctuation">;</span>    display<span class="token operator">:</span>flex<span class="token punctuation">;</span>    align<span class="token operator">-</span>items<span class="token operator">:</span>center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img3.mukewang.com/5e9667880001796c25371056.jpg" alt="img"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*项目第一行文字的基线对齐 baseline*/</span><span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>    height<span class="token operator">:</span><span class="token number">700</span>px<span class="token punctuation">;</span>    backgroud<span class="token operator">:</span>blue<span class="token punctuation">;</span>    display<span class="token operator">:</span>flex<span class="token punctuation">;</span>    align<span class="token operator">-</span>items<span class="token operator">:</span>baseline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三个盒子中设置不同的字体大小，可以实现一下效果。</p><p><img src="https://img3.mukewang.com/5e9668ff0001f8f125341053.jpg" alt="img"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*默认值 stretch*/</span><span class="token punctuation">.</span>box <span class="token punctuation">&#123;</span>        height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        background<span class="token operator">:</span> blue<span class="token punctuation">;</span>        display<span class="token operator">:</span> flex<span class="token punctuation">;</span>        align<span class="token operator">-</span>items<span class="token operator">:</span> stretch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>box div <span class="token punctuation">&#123;</span>        <span class="token comment">/*不设置高度，元素在垂直方向上铺满父容器*/</span>        width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img2.mukewang.com/5e9669ef00017e0e25390453.jpg" alt="img"></p></li><li><p>给子元素设置flex占比（相对于父元素）</p><blockquote><ol><li>给子元素设置flex属性，可以设置元素相对于父元素的占比。</li><li>flex属性的值只能是正整数，表示占比多少</li><li>给子元素设置了flex属性后，其宽度值会失效。</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    <span class="token punctuation">.</span>box <span class="token punctuation">&#123;</span>        height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        background<span class="token operator">:</span> blue<span class="token punctuation">;</span>        display<span class="token operator">:</span> flex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>box div <span class="token punctuation">&#123;</span>        width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        height<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>box1 <span class="token punctuation">&#123;</span>        flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        background<span class="token operator">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>box2 <span class="token punctuation">&#123;</span>        flex<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span>        background<span class="token operator">:</span> orange<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>box3 <span class="token punctuation">&#123;</span>        flex<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>        background<span class="token operator">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box1"</span><span class="token operator">></span>flex<span class="token operator">:</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span>flex<span class="token operator">:</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box3"</span><span class="token operator">></span>flex<span class="token operator">:</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\OMEN\AppData\Roaming\Typora\typora-user-images\image-20210507204508184.png" alt="image-20210507204508184"></p></li></ol><h1 id="css设置小技巧"><a href="#css设置小技巧" class="headerlink" title="css设置小技巧"></a>css设置小技巧</h1><ol><li><p>水平居中设置-行内元素</p><p>如果被设置元素为文本、图片等行内元素，水平居中是通过给父元素设置text-align：center来实现。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token punctuation">.</span>txtCenter<span class="token punctuation">&#123;</span>text<span class="token operator">-</span>align<span class="token operator">:</span>center<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"txtCenter"</span><span class="token operator">></span>我要水平居中<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>水平居中设置-定宽块状元素</p><p>可以通过设置左右margin的值为“auto”来实现居中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>    div<span class="token punctuation">&#123;</span>        border<span class="token operator">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>        width<span class="token operator">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token comment">//设置定宽，不可缺失此条件</span>        margin<span class="token operator">:</span><span class="token number">100</span>px auto<span class="token punctuation">;</span><span class="token comment">//100px为上下间距的值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>已知宽高实现盒子的水平居中</p><p>已知有两个div元素，要实现子元素相对于父元素垂直水平居中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//父元素</span><span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>    border<span class="token operator">:</span><span class="token number">100</span>px solid red<span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>    position<span class="token operator">:</span>relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//子元素</span><span class="token punctuation">.</span>box1<span class="token punctuation">&#123;</span>    width<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    border<span class="token operator">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>    position<span class="token operator">:</span>absolute<span class="token punctuation">;</span>    top<span class="token operator">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    left<span class="token operator">:</span><span class="token number">50</span><span class="token operator">%</span>    margin<span class="token operator">:</span><span class="token operator">-</span><span class="token number">100</span>px <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>技术点解释：</p><p>1.利用父元素设置相对定位，子元素设置绝对定位。</p><p>2.子元素设置上和左偏移都是50%，则元素的左上角在父元素的中心位置。（如下图）</p><p>3.然后再用margin给上和左设置负的自身宽和高的一半，就能达到垂直水平居中的效果。</p></blockquote><p><img src="https://img2.mukewang.com/5e967c3d0001fbbf25600616.jpg" alt="img"></p></li><li><p>宽高不定实现盒子水平居中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>    border<span class="token operator">:</span><span class="token number">2</span>px solid red<span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>    position<span class="token operator">:</span>relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>box1<span class="token punctuation">&#123;</span>    border<span class="token operator">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>    position<span class="token operator">:</span>absolute<span class="token punctuation">;</span>    top<span class="token operator">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    left<span class="token operator">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    transform<span class="token operator">:</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//与上一个类似，中间有空格</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>技术点解释：</p><ol><li>.利用父元素设置相对定位，子元素设置绝对定位</li><li>子元素设置上和左偏移都为50%</li><li>然后利用css3属性translate位移，给上和左位移-50%的距离，就能实现居中的效果。</li></ol></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript学习</title>
      <link href="2021/05/31/javaScript%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/05/31/javaScript%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="js书写位置"><a href="#js书写位置" class="headerlink" title="js书写位置"></a>js书写位置</h1><ol><li><p>行内式的js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"唐博湖"</span> onclic<span class="token operator">=</span><span class="token string">"alert('秋香姐')"</span><span class="token operator">></span><span class="token comment">//onclic弹出框</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>内嵌式的js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'沙摩洛多'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>外部式的js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">创建新文件my<span class="token punctuation">.</span>js<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'内容'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"my.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//中间不能加入内容，且用单引号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ol><li>单行注释：//内容  (ctrl+/)</li><li>多行注释：/*  */ (shift+alt+a)</li></ol><h1 id="输入、输出语句"><a href="#输入、输出语句" class="headerlink" title="输入、输出语句"></a>输入、输出语句</h1><ol><li><p>prompt（‘请输入内容‘）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">propmt</span><span class="token punctuation">(</span><span class="token string">'请输入您的内容'</span><span class="token punctuation">)</span>；<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>弹出警示框</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'弹出的内容'</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>控制台输出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是程序员能看到的内容'</span><span class="token punctuation">)</span>；<span class="token comment">//不会在网页显示，需要点击f12查看</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="声明变量以及初始化"><a href="#声明变量以及初始化" class="headerlink" title="声明变量以及初始化"></a>声明变量以及初始化</h1><p>var age=18;</p><p>var myname=dongdong;</p><p>var是varible的缩写,各种类型的变量均使用var来定义。</p><p><strong>不声明变量直接给变量赋值，仍然能输出，但是不提倡，此变量为全局变量。</strong></p><p>变量命名规范：</p><ul><li>与java类似，由数字，字母，下划线。美元符号组成；</li><li>不能以数字开头</li><li>不能以关键字作为变量名</li><li>遵循驼峰命名法：首字母小写，后面单词的首字母要大写。：myFirstame </li><li>name在一些浏览器有特殊的含义，一般不用作变量名。</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ol><li><p>js的变量数据类型是只有在程序运行过程，很具等号右边的值来确定的。</p></li><li><p>js是动态语言，数据类型是可以变的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'pink'</span><span class="token punctuation">;</span><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>简单数据类型</p><ul><li><p>数字型：Number  默认值为0   </p><ul><li>最大值：NUmber.MAX_VALUE </li><li>最小值：Number.MIN_VALUE </li><li>无穷大：Infinity   无穷小：-Infinity  </li><li>非数字：NaN</li><li>判断非数字：isNaN（）；若是非数字：true 否：flase</li></ul></li><li><p>字符串型：</p><ul><li>String 推荐使用单引号</li><li>引号嵌套：外双内单，外单内双    </li><li>检测字符串的长度：str.length;</li><li>字符串的拼接：‘沙漠’+’骆驼’；//各种类型均能拼接，与jjava相同</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"我是一只'快乐且单身'的程序员！"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>转义字符：\n;换行</p><p>​                    \:斜杠</p><p>​                    &#39;:单引号</p><p>​                    &quot;:双引号</p><p>​                    \t:tab缩进</p><p>​                    \b:空格。b是blank的缩写</p></li></ul></li><li><p>布尔型：boolean</p></li><li><p>Undefined:var a；声明了变量a但是没有给值，此时a=undefined；</p></li><li><p>Null：var a=null;声明了变量a为空值；</p></li><li><p>检测变量数据类型：typeof 变量</p><p>黑色：String型      蓝色：数字型   深蓝色：布尔型   浅灰色：null 和defined</p></li></ul></li><li><p>数字类型转化</p><ul><li><p>使用表单和prompt获取的数据默认是字符串型</p></li><li><p>转化成字符串：</p><ul><li><p>```javascript<br>var num=10;var str=num.toString();</p><pre class="line-numbers language-none"><code class="language-none">+ &#96;&#96;&#96;javascript  console.log(String(num));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>```javascript<br>console.log(num+””);//最常用</p><pre class="line-numbers language-none"><code class="language-none">+ 转化成数字型  + &#96;&#96;&#96;javascript    var age&#x3D;prompt(&#39;输入年龄&#39;)；console.log(parseInt(age));&#x2F;&#x2F;只能得到整数console.log(parseFloat(age));&#x2F;&#x2F;转化成小数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>```javascript<br>console.log(Number(age)); </p><pre class="line-numbers language-none"><code class="language-none">+ &#96;&#96;&#96;javascript  利用算数运算(-,*,\)console.log(&#39;133&#39;-0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>转化成布尔型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false:'',0,NaN,null,undenfined//true:除了上面的5种类型外，均为true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ol><li><p>比较运算符：</p><ul><li>“==”会自动转化数据类型，例如：18==“18”</li><li>“===”：全等符号：数据类型和值都相等</li></ul></li><li><p>逻辑运算符：</p><p>&amp;&amp;、||、！</p><p>逻辑中断（短路运算）：</p><ul><li>表达式1&amp;&amp;表达式2：如果表达式1为真，则返回表达式2；如果表达式1为假，则返回表达式2.</li><li>表达式1||表达式2：如果表达式1为真，则会返回表达式1；如果表达式1为假，则返回表达式2.</li><li>&amp;&amp;的优先级高于||</li></ul></li></ol><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li><p>定义数组：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//或者var array=[];//空数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输出数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">conslole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接输出整个数组//若要挨个输出，则使用循环遍历</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>改变数组元素个数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>array<span class="token punctuation">.</span>length<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token comment">//重新给数组元数个数赋值2.array[5]=10；//加入原来数组有4个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ol><li><p>函数声明</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//函数体&#125;//函数名一般是动词，函数不调用自己不执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>函数调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">函数名（）；<span class="token comment">//函数不调用，自己不执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>函数的参数</p><ul><li><p>形参直接写变量名就行，不用声明数据类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果实参个数小于形参个数，则为undifine</p></li></ul></li><li><ul><li>return之后的代码不会被执行</li><li>return只能返回一个值，且返回后面那个值</li><li>要想返回多个值，需要返回一个数组</li><li>如果函数没有return，则返回undefined</li></ul></li><li><p>arguments:储存了所有的实参，以数组形式，但没有真正数组的一些方法。(函数内置好的对象)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">//arguments为默认的内置对象        function fun()&#123;            // console.log(arguments);            for(var i=0;i&lt;arguments.length;i++)&#123;            console.log(arguments[i]);        &#125;        &#125;        fun(1,2,3);            &lt;/script></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>另一种声明方式：</p><pre class="line-numbers language-&#123;" data-language="&#123;"><code class="language-&#123;">var num&#x3D;function(are)&#123;consloe.log(are)&#125;num(&quot;你好&quot;)；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="js作用域"><a href="#js作用域" class="headerlink" title="js作用域"></a>js作用域</h1><ol><li><ul><li><p>全局作用域：整个script标签或者是单独文件    </p><p>全局变量：在浏览器关闭时才会销毁，比较占内存</p></li><li><p>局部作用域：函数内部，只在函数内部起作用</p><p>局部变量：执行完函数就会直接销毁，节省内存</p></li></ul></li><li><p>js没有块级作用域：{}  if{}  for{}</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在循环外面仍然可以调用numconsole.log(num);</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用域链：内部函数访问外部函数的变量，采用链式查找，一层一层的查找，就近原则。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行&#125;var num=23;f1();//输出结果为12；</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><ol><li><p>js引擎运行js分为2步：预解析，执行代码</p></li><li><p>引擎会把所有的var和function提升到当前作用域的最前面。</p></li><li><ul><li><p>变量预解析：就是把所有的<strong>变量声明</strong>提升到当前作用域最前面。（不提升赋值）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//正确，会提升function fun()&#123;console.log(12);&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">fun</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    consolr<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//错误，提升的是var fun；</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//输出为undefined//会提升var num；但没有赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>函数提升：把所有的函数声明提到最前面。</p></li><li><p>```javascript</p><script>        fun();        function fun(){            var a=b=c=9;             //var a=9;            // b=9;            // c=9;  b和c为全局变量            console.log(a);            console.log(b);            console.log(c);        }        console.log(b);        console.log(c);        console.log(a);        //预解析        // function fun(){        //     var a=9;        //     b=9;        //     c=9;        //     console.log(a);        //     console.log(b);        //     console.log(c);        // }        // console.log(a);        // console.log(b);        // console.log(c);            </script><pre class="line-numbers language-none"><code class="language-none">#  js对象1. 创建对象：   - 利用字面量&#123;&#125;:     &#96;&#96;&#96;javascript     var obj&#x3D;&#123;    uname:&quot;zhagsanfeng&quot;,    age:18,    sex:&quot;男&quot;,    sayHI:function()&#123;        console.log(&quot;hi&quot;)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多个属性和方法之间用逗号隔开</li><li>赋值时用冒号</li><li>方法冒号后面跟着的是一个匿名函数</li><li>使用对象：对象名.属性    或者   对象名[‘属性名‘]</li></ul></li></ul><ul><li><p>用new</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"nihao1"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sayhi<span class="token operator">=</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    soncsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"niaho1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>多个属性之间用分号隔开</li><li>赋值时用等号</li></ul></li><li><p>利用构造函数创建对象(类似于类）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>属性<span class="token operator">=</span>值；    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">方法</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sge<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sing</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">song</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> ldh<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'楼的话'</span>，<span class="token number">16</span>，’男<span class="token punctuation">)</span><span class="token punctuation">;</span>ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">"冰雨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>遍历对象</p><blockquote><p>for in可以遍历数组和对象</p></blockquote> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//属性    console.log(obj[k]);//值&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>内置对象</p><ul><li><p>查阅文档：MDN</p></li><li><p>math:</p><ul><li></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取最大值Math.abs(-1);//取绝对值  Math.abs('-1');//值也为1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//三个取整数方法Math.floor();//向下取整数，floor为地板Math.ceil();//向上去整数，ceil为天花板Math.round();//四舍五入，但是.5往大了取：0.5取1，-1.5取-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>取随机数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//取0-1之间的随机小数，0=&lt;x&lt;1console.log(Math.random());</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//得到两个数之间的随机数,但是取不到maxfunction getRandomArbitrary(min,max)&#123;    return MAth.random()*(max-min)+min;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//得到两个数之间的随机整数，取不到最大数function getRandomInt(min,max)&#123;    min=Math.ceil(min);    max=Math.floor(max);    return Math.floor(Math.random*(max-min))+min;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//得到两个数之间的随机整数。，包括边界function getRandomInt(min,max)&#123;    min=Math.ceil(min);    max=Math.floor(max);    return Math.floor(Math.random*(max-min+1))+min;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>Date：</p><ul><li><p>Date是一个构造函数，必须用new实例化才能使用</p></li><li><p>如果没有参数，则返回当前时间</p></li><li><p>输入时间有2种：1. 2020，20，1</p><p>​                              2.’2020-10-2’</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> date1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前时间var date2=new Date(2020,10,2);//会自动往后增加一个月var date2=new Date('2020-10-2');</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>日期的格式化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">date<span class="token punctuation">.</span><span class="token function">getaFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回当前的年份date.getMonth();//返回当前月份,但是月份会减1，以0-11来记date.getDate();//返回日期date.getDay();//返回星期，周一返回，周六返回6，周日返回0date.getHours();//小时date.getMinutes();//分钟数date.getSesonds();//秒数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//输出当前时间的案例&lt;script>       var date=new Date();       var year=date.getFullYear();       var month=date.getMonth();       var day=date.getUTCDate();       var h=date.getHours();       h=h&lt;10?"0"+h:h;       var m=date.getMinutes();       m=m&lt;10?"0"+m:m;       var s=date.getSeconds();       s=s&lt;10?'0'+s:s;       var arr=["星期日","星期一","星期二","星期三","星期四","星期五","星期六"];       function getDate()&#123;           return "现在的时间为："+year+"年"+month+"月"+day+"日"+h+":"+m+":"+s+" "+arr[date.getDay()];       &#125;       console.log(getDate());    &lt;/script></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获得Date总的毫秒数，不是指当前时间的毫秒数，而是距1970年1月1号</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最简单的写法var date1=+new Date();//H5新增的方法console.log(Date.now());</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>数组对象</p><ol><li>创建数组：</li></ol><ul><li>```java<br>var arr=[1,23,3];//直接创建<pre class="line-numbers language-none"><code class="language-none">+ &#96;&#96;&#96;java  var arr&#x3D;new Array();&#x2F;&#x2F;空数组var arr&#x3D;new Array(2);&#x2F;&#x2F;表示数组有2个元素，但是仍然是空数组var arr&#x3D;new Array(1,2,3);&#x2F;&#x2F;表示数组有三个元素：1，2，23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li><p>检测是否为数组</p><ul><li>```javascript<br>console.log(arr instanceof Array);//instanceof相当于“属于”的意思<pre class="line-numbers language-none"><code class="language-none">+ &#96;&#96;&#96;javascript  &#x2F;&#x2F;Array.isArray(参数);console,log(Array.isArray(arr));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>添加或者删除数组的元素</p><ul><li><p>在数组末尾添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//push(元素)var arr=[1,2,3];arr.push(4,"pink");//返回值为数组的长度comsole.log(arr);//返回新数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在数组前面添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//unshift(元素)arr.unshift(4,'nihao1');//返回值仍为数组的长度console.log(arr);//返回新数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数组的最后一个元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//pop();没有参数,且一次只能删除一个元素arr.pop();//返回值为删除元素的值console.log(arr);//返回新数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数组的第一个元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//shift();没有参数，且一次只能删除一个arr.shift();//返回值为删除的那个元素console.log(arr);//返回数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>4.翻转数组</p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//reversevar arr=[1,2,3];arr.reverse();</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.数组排序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//sortarr.sort();//升序排列，但是按照字符串排列</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//按照值进行排序arr.sort(function(a,b)&#123;    return a-b;//升序    return b-a;//降序&#125;);</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果指明了 <code>compareFunction</code> ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p><ul><li><p>如果 <code>compareFunction(a, b)</code> 小于 0 ，那么 a 会被排列到 b 之前；</p></li><li><p>如果 <code>compareFunction(a, b)</code> 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</p></li><li><p>如果 <code>compareFunction(a, b)</code> 大于 0 ， b 会被排列到 a 之前。</p></li><li><p><code>compareFunction(a, b)</code> 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</p></li></ul></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// 按某种排序标准进行比较, a 小于 b    return -1;  &#125;  if (a > b ) &#123;    return 1;  &#125;  // a must be equal to b  return 0;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.查找数组的索引</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//indexof,从前面开始查找，若没有元素，则返回-1var arr=[1,2,3,4];console.log(arr.indexOf(1));//返回值为0console.log(arr.indexOf(5));//返回值为-1//lastindexof，从后面开始查找，但是索引值不发生改变console.log(arr.lastindexOf(1));//返回值为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.数组转换为字符串</p><ul><li>```javascript<br>//toString();var arr=[1,23,4];cosole.log(arr.toString());<pre class="line-numbers language-none"><code class="language-none">+ &#96;&#96;&#96;javascript  join();可以改变分隔符var arr1&#x3D;[1,2,34,5];comsole.log(arr.join(&#39;-&#39;));&#x2F;&#x2F;用横杠来进行分割<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li><li><p>字符串对象</p><ol><li><p>基本包装类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//基本包装类型就是把简单数据类型转化为复杂数据类型,String、Number、BOllean，会增加一些属性var atr='andy';console.log(atr.length);//其实质为:var temp=new String('andy');str=temp;temp=null;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字符串的不可变性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"zhangruiqi"</span><span class="token punctuation">;</span>str<span class="token operator">=</span><span class="token string">"wud"</span><span class="token punctuation">;</span><span class="token comment">//此时字符串的h值变为wud，但是并不是原来的值发生改变，二十新开辟了一个内存空间存放，原来的值仍然在原内存空间存放</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>根据字符返回位置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"改革春风吹满地,春天来了"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'春'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//返回值为2console.log(str.insexOf('春',3));//从索引为3的元素开始查找，返回值为8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>根据位置返回字符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.charAt(index);var str="ascdf";console,log(str.charAt(1));//返回的值为s//2.charCodeAt(index);返回的是字符的ASCII码  目的：用来判断用户输入的是什么键console.log(str.charCodeAt(0));//返回的值为65；//3.str[index],HTML5，IE8支持，与charAt相同console.log(str[1]);</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>拼接字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//str.concat('字符串');var str='asdg';console.log(str.concat('nihao'));</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>截取字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//substr(start,length)var str='asdfghj';console,log(str.substr(1,2));//从索引为1的位置取，取2个；结果为sd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>替换字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//str.replace('要替换的字符串'，'替换后的字符串')；//但是只能替换一个字符，要想替换多个需要用到数组var str='avcsacs';console.log(atr.replace('a','*'));//只替换的一个a//替换所有awhile(str.indexOf('a')！=-1)&#123;   str1=str.replace('a','8')&#125;；</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字符串转化为数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//split('分隔符')var str1='red,pink,blue';console.log(str1.split(','));var atr2='red&amp;pinkl&amp;ij';console.log(atr2.split('&amp;'));</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul></li><li><p>数据类型与内存分配</p><ul><li><ul><li><p>简单数据类型：也叫基本数据类型，在储存变量时储存的是值本身，因此叫叫作值类型：string 、number、boolean、undefined、null</p></li><li><p><strong>null特殊，储存的是一个空对象</strong></p></li><li><p>简单数据类型储存在栈内存中</p></li><li><p>在进行传参时，进行值传递</p></li></ul></li><li><ul><li>复杂数据类型：在储存时变量中储存的仅仅时地址（引用）用十六进制表示，因此叫作引用数据类型</li><li>通过new关键字创建的对象（系统对象，自定义对象），如：Object,Array,Date等，数组也是</li><li>变量中储存的是地址（该地址指向堆内存），储存在栈内存中，但是真正的值储存在堆内存中</li><li>在进行传参时，传递的是地址</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
